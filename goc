#!/c/Users/Leander-laptop/AppData/Local/Programs/Python/Python38/python

from datetime import datetime as dt
import argparse
import os

from google.auth.transport.requests import Request
from google.oauth2.credentials import Credentials
from google_auth_oauthlib.flow import InstalledAppFlow
from googleapiclient.discovery import build
from googleapiclient.errors import HttpError

# If modifying these scopes, delete the file token.json.
SCOPES = ['https://www.googleapis.com/auth/calendar']


class CalTime():
    def __init__(self):
        if not self._auth():
            print('Auth failed!')
            exit()

        self.service = build('calendar', 'v3', credentials=self.creds)
        self._setup()

    def _auth(self):
        """Shows basic usage of the Google Calendar API.
        Prints the start and name of the next 10 events on the user's calendar.
        """
        self.creds = None
        # The file token.json stores the user's access and refresh tokens, and is
        # created automatically when the authorization flow completes for the first
        # time.
        if os.path.exists('token.json'):
            self.creds = Credentials.from_authorized_user_file('token.json', SCOPES)
            return True
        # If there are no (valid) credentials available, let the user log in.
        if not self.creds or not self.creds.valid:
            if self.creds and self.creds.expired and self.creds.refresh_token:
                self.creds.refresh(Request())
            else:
                flow = InstalledAppFlow.from_client_secrets_file('credentials.json', SCOPES)
                self.creds = flow.run_local_server(port=0)
            # Save the credentials for the next run
            with open('token.json', 'w') as token:
                token.write(self.creds.to_json())
            return True
        return False

    def _setup(self):
        if not os.path.exists('calendar.txt'):
            self.show_all_cals()
            print("\n!!! Missing calendar.txt file, create file and paste in one of the calendar id's above\n")
            exit()

        with open('calendar.txt', 'r') as f:
            self.calendarId = f.read().replace(' ','').replace('\n','')

        if not os.path.exists('data.txt'):
            with open('data.txt', 'a+'):
                pass

    def show_all_cals(self):
        cals = self.service.calendarList().list().execute()
        for i in cals.get('items', []):
            print(i.get('summary', None), ' - ', i.get('id', None))

    def start_time(self, summary):
        summary = summary.replace('|',' - ')
        now = dt.now().isoformat() # formate: 2022-10-08T10:30:00

        with open('data.txt', 'r') as f:
            data = f.read()
            if data:
                dl = data.split('|')
                title = dl[0]
                start = dl[1]
                self.create_event(title, start, now)

        with open('data.txt', 'w') as f:
            data = f"{summary}|{now}"
            f.write(data)
            
        print('Task started')

    def create_event(self, summary, startDate, endDate):
        body = {
            'summary': summary,
            'start': {'dateTime': startDate, 'timeZone': 'Europe/Oslo'},
            'end': {'dateTime': endDate, 'timeZone': 'Europe/Oslo'},
        }

        event = self.service.events().insert(calendarId=self.calendarId, body=body).execute()
        print('Event created:', event.get('htmlLink'))

    def get_events(self):
        print('Getting the upcoming 10 events')

        now = datetime.datetime.utcnow().isoformat() + 'Z'  # 'Z' indicates UTC time
        
        events_result = self.service.events().list(calendarId=self.calendarId, timeMin=now,
                                                  maxResults=10, singleEvents=True,
                                                  orderBy='startTime').execute()
        events = events_result.get('items', [])

        if not events:
            print('No upcoming events found.')
            return

        # Prints the start and name of the next 10 events
        for event in events:
            start = event['start'].get('dateTime', event['start'].get('date'))
            print(start, event['summary'])


if __name__ == '__main__':
    cal = CalTime()
    cal.start_time('cc-123 testing')
    #cal.add_new()
